// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_test_widget_integration_unit/test/controllers/album_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_test_widget_integration_unit/data/models/album.dart'
    as _i6;
import 'package:flutter_test_widget_integration_unit/data/repositories/album_repository.dart'
    as _i3;
import 'package:flutter_test_widget_integration_unit/error/failure/failure.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AlbumRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlbumRepository extends _i1.Mock implements _i3.AlbumRepository {
  MockAlbumRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> create(_i6.Album? album) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [album],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #create,
            [album],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Album>> fetchById(int? albumId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [albumId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Album>>.value(
            _FakeEither_0<_i5.Failure, _i6.Album>(
          this,
          Invocation.method(
            #getById,
            [albumId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Album>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Album>>> fetchAll() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Album>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Album>>(
          this,
          Invocation.method(
            #getAll,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Album>>>);
}
